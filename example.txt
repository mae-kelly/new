-- DIAGNOSTIC AND SIMPLE TABLE SCANNER
-- ============================================================================
-- Let's first test basic access and then build up from there
-- ============================================================================

-- Step 1: Test basic access to your project
SELECT 
  "=== PROJECT ACCESS TEST ===" as test_section,
  "Testing if we can access your project..." as status;

-- Step 2: Try to list datasets in your current project (using default project)
SELECT 
  "=== AVAILABLE DATASETS IN CURRENT PROJECT ===" as section,
  schema_name as dataset_name
FROM `INFORMATION_SCHEMA.SCHEMATA`
WHERE schema_name NOT IN ('INFORMATION_SCHEMA', 'information_schema', '__TABLES__')
ORDER BY schema_name;

-- Step 3: Try to get basic table info from current project
SELECT 
  "=== TABLES IN CURRENT PROJECT ===" as section,
  table_schema as dataset_id,
  table_name,
  COUNT(*) as column_count
FROM `INFORMATION_SCHEMA.COLUMNS`
WHERE table_schema NOT IN ('INFORMATION_SCHEMA', 'information_schema', '__TABLES__')
  AND table_name NOT LIKE '%_BACKUP_%'
  AND table_name NOT LIKE 'temp_%'
GROUP BY table_schema, table_name
ORDER BY table_schema, table_name
LIMIT 50;

-- Step 4: Create a simple results table in the current project's default dataset
-- (This will use whatever dataset BigQuery defaults to)
CREATE OR REPLACE TABLE table_samples (
  scan_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
  dataset_id STRING,
  table_name STRING,
  column_name STRING,
  data_type STRING,
  sample_note STRING
);

-- Step 5: Insert some basic metadata without sampling actual data yet
INSERT INTO table_samples (dataset_id, table_name, column_name, data_type, sample_note)
SELECT 
  table_schema as dataset_id,
  table_name,
  column_name,
  data_type,
  'Metadata collected' as sample_note
FROM `INFORMATION_SCHEMA.COLUMNS`
WHERE table_schema NOT IN ('INFORMATION_SCHEMA', 'information_schema', '__TABLES__')
  AND table_name NOT LIKE '%_BACKUP_%'
  AND table_name NOT LIKE 'temp_%'
ORDER BY table_schema, table_name, ordinal_position
LIMIT 100;

-- Step 6: Show what we collected
SELECT 
  "=== BASIC COLLECTION RESULTS ===" as section,
  COUNT(DISTINCT dataset_id) as datasets_found,
  COUNT(DISTINCT CONCAT(dataset_id, '.', table_name)) as tables_found,
  COUNT(*) as columns_found
FROM table_samples;

-- Step 7: Show sample of collected data
SELECT 
  "=== SAMPLE OF COLLECTED METADATA ===" as section,
  dataset_id,
  table_name,
  column_name,
  data_type,
  sample_note
FROM table_samples
ORDER BY dataset_id, table_name, column_name
LIMIT 20;

-- Step 8: Show dataset summary
SELECT 
  "=== DATASET SUMMARY ===" as section,
  dataset_id,
  COUNT(DISTINCT table_name) as tables_count,
  COUNT(*) as columns_count
FROM table_samples
GROUP BY dataset_id
ORDER BY dataset_id;